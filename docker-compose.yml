version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"
    networks:
      - windpark_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  postgres_init:
    image: postgres:15-alpine
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGHOST=postgres
    networks:
      - windpark_network
    command: >
      sh -c "
        if ! psql -tAc \"SELECT 1 FROM pg_database WHERE datname='windpark_db'\" | grep -q 1; then
          echo 'Creating database and user...'
          psql -c 'CREATE DATABASE windpark_db;'
          psql -c \"CREATE USER windpark WITH PASSWORD 'windpark_password';\"
          psql -c 'GRANT ALL PRIVILEGES ON DATABASE windpark_db TO windpark;'
          psql -d windpark_db -c 'GRANT ALL ON SCHEMA public TO windpark;'
        else
          echo 'Database already exists. Skipping creation.'
        fi
      "

  concentrador:
    build:
      context: ./concentrador
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - API_KEY=secret123
      - DATABASE_URL=postgresql://windpark:windpark_password@postgres:5432/windpark_db
    depends_on:
      postgres_init:
        condition: service_completed_successfully
    networks:
      - windpark_network
    restart: always

  generador:
    build:
      context: ./generador
      dockerfile: Dockerfile
    environment:
      - API_KEY=secret123
      - CONCENTRADOR_URL=http://concentrador:8000/medidas
    depends_on:
      - concentrador
    networks:
      - windpark_network
    restart: always
    deploy:
      replicas: 10

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-magic
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

volumes:
  postgres_data:
  pgadmin_data:

networks:
  windpark_network:
    driver: bridge
